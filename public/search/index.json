[{"content":" This blog post was posted originally in the Greater Internet Freedom program website, this is a copy for archiving purposes\nWhen dealing with suspicious documents at the technical level, we are used to finding resources focusing on Microsoft Office macro-enabled documents (like our material on analyzing malicious documents) because they are the most used tools by attackers to trick users into running malicious code on their computers. With this in mind, Microsoft Office started to limit the execution of macros, making it more difficult to activate them to execute code coming from files downloaded from websites and other potentially untrusted sources. While this measure certainly helps prevent a significant number of attacks, it also contributes to the scenario of malicious actors exploring other ways to weaponize legitimate technologies to trick users into executing malware.\nTo emulate the potential of malicious documents, attackers must identify which file formats and workflows are legitimate enough to bypass common security controls, and powerful enough to allow them to infect devices easily through the victims. Based on observed campaigns during the last years, some of the new techniques are:\nCompressed file containers (file extensions like .zip and .rar) Image: An example of an infection chain enabled by a zip file, as reported by TrendMicro\nZip files are very popular and useful to store or transmit files, especially when the storage limit or internet data cost need to be considered. In terms of security, attackers can store malicious code inside compressed files, send them through email or other channels, and trick us to extract and/or open them. The good news (a bit terrible in terms of privacy though), is that many services try to see if the compressed file contains potentially harmful elements like executables or macro-enabled files, and warn the users or block the access to the file altogether if actual malicious code is found. In practice, while helpful to mitigate infections, there are some cases where attackers sneak malicious code undetected. Also, they are increasingly chaining different attacks together to try to conceal the actual malicious code, but more about that in a bit.\nDisk image container files (file extensions like .iso and .img) Image: The icon of a .iso file in Microsoft Windows\nLike compressed files, disk image containers can store files and can be delivered as just one file. In everyday use, this file format is known as a way of storing disk images in files (\u0026ldquo;CDs\u0026rdquo; with Operating Systems (OS) installers, backups of flash drives or hard drives, images used to restore damaged systems, etc.).\nAlso, like compressed files, they can be used to store malicious code that we can execute if we are tricked to do so. And for instance, in MacOS, this delivery mechanism is very common to install legitimate software. So, under the right conditions it won\u0026rsquo;t be suspicious to download an image file, open it and double-click some file inside.\nMicrosoft OneNote notebooks (file extension .one) Another way to deliver arbitrary files, including malicious code, is the use of OneNote notebooks. They can contain not only regular text and images, but also any kind of file the creator wants to embed for further use, like PDFs and other Microsoft Office files. The way OneNote structures its files is specific to this file format, then, many security solutions might not be configured to analyze the content of OneNote notebooks looking for threats inside embedded files, making this method attractive to deliver malware. However, for this to work, attackers still need their victims to open the OneNote notebook and execute the embedded files.\nImage: Example of a MS OneNote asking to execute and embedded file\nMicrosoft Windows Shortcut (file extension .lnk) Even when \u0026ldquo;.lnk\u0026rdquo; files sound unknown to many of us, this file format is very common. The associated files are called \u0026ldquo;shortcuts\u0026rdquo; and if you are using a Microsoft Windows computer, there are good chances that you have some of these on your Desktop to open specific applications (you can recognize them by the little folded arrow at the bottom left of the respective icon when using the file explorer).\nIn backstage, a shortcut will execute a command in the computer that in most cases will start a program that is living elsewhere in the filesystem, or if it is already started, bring it to the front or open a second instance. Here we can see for our shortcut to GIMP that the actual program lives in a folder inside “Program Files”, even when the shortcut is on our Desktop.\nAs one of the features of a shortcut, we can pass extra information to the program that might alter its behavior. For instance, in this shortcut for Microsoft Edge we added the argument “-inprivate”, and now the application will know we want to open a window on InPrivate mode each time we double-click the shortcut.\nThe issue with this in terms of security, is that someone can craft a shortcut making a program do harmful things, like downloading a file, installing a program, sending information to an unintended party, or all the above. This is happening recently more often where attackers find ways to deploy entire pieces of malicious code (usually called payloads) in victims’ computers using just a shortcut. The fact that anyone can change the name and the icon of shortcuts to anything, makes easier to trick victims to think they are clicking something different to a malware or a shortcut.\nIn this example we see the content of a malicious shortcut file that opens Microsoft PowerShell and executes a long malicious code that serves as an initial stage of a real malware infection.\nAll of the above More recently, attackers are conducting infection campaigns that use many tricks together to minimize the chances of being detected before the victim\u0026rsquo;s devices are infected. It is becoming common to read about a campaign that delivers a .iso file containing a macro-enabled document that tries to download obfuscated malware from the internet, or a .zip file containing a .lnk shortcut that copies a piece of malware inside the compressed file to a system folder, among other similar examples. One good thing around these approaches is that they are increasingly looking more strange and hopefully suspicious, but the downside is that it is difficult to communicate or train end-users around those because they might be so different. Therefore it is impossible to explain in detail how these attacks will look like when found, making it more important for people to be clear on how \u0026ldquo;habitual use\u0026rdquo; (or the baseline) looks like, so it is easier to be alert when something feels different.\nImage: Example of a chained attack using some of the described techniques\nIn general First, it is a good moment to acknowledge that given the inclusion of new security features in Operating Systems, applications, and services in general, traditional attacks are more difficult to conduct (and hopefully) a bit more uncommon. However, there are still some new and more polished techniques attackers are using to infect targets.\nAlso, in general, it is important to acknowledge that these attacks are not affecting everyone, so we should be aware of not creating fear in our communities, where depending on the existing levels of anxiety, trauma, and legitimate concerns, a fearmongering message might affect them more negatively than positively. That said, we need to be responsible in the way we transmit the information, introduce these issues, and to whom. For instance, it is more probable that high-profile and high-risk people need to worry about these threats. So in terms of training, these groups or individuals are the most productive to cover these techniques.\nOne way to put the power in the hands of users is communicating that given all the existing protections, it is less likely that attacks will be successful, and that for those more elaborated attacks, it is still more efficient for attackers to trick us to execute malware ourselves instead of conducting more advanced attacks. So ultimately if we are aware, we will probably know when something is off, and also the good news is that the advice against this use of \u0026ldquo;new\u0026rdquo; file formats mostly remains the same than in the past, some examples:\nPlease think twice before downloading and opening files that you usually don\u0026rsquo;t receive. Are there ways to check with the sender over a different channel? Keep an eye on file extensions. If this is a document, then why is it inside a .iso or .zip file? Is there a legitimate reason for this? Bonus: We can also activate for our Operating System the visualization of file extensions, so it is easier to see if one file is disguised as a different file format. Be aware in case an attachment we opened is asking us to give admin permissions and why. Keep Operating Systems and applications up to date. It is also important to know the end-of-life date of our devices, operating systems, and other technical solutions; this date will tell us when our technology is expected to stop receiving updates, including security ones. A good place to start looking at this is endoflife.date (the link points to an example for Google Pixel). For very high-profile/complex threat models: Prepare a physical or virtual environment to open suspicious files, like Virtualbox, using Qubes OS, or even opening documents inside Gmail or Outlook without downloading the files, among other things. ","date":"2023-01-05T00:00:00Z","image":"http://localhost:1313/p/analysis-of-malicious-documents-bonus-blog-post-more-recent-techniques-in-attacks-with-malicious-documents/1_hu36a617cf5e3c297ddbde091be7327273_36258_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/analysis-of-malicious-documents-bonus-blog-post-more-recent-techniques-in-attacks-with-malicious-documents/","title":"Analysis of malicious documents – Bonus blog post – More recent techniques in attacks with malicious documents  "},{"content":" This series was posted originally in the Greater Internet Freedom program website, this is a copy for archiving purposes\nSo far, we covered an introduction to threat modeling, the use of virtual machines as environments to analyze malware, and how to start analyzing PDFs and Microsoft Office documents in previous parts. All these topics will help us to give better support to others as the first line of defense against suspicious documents.\nStill, if we support vulnerable actors (the primary intended audience of this series of posts), we know that this is only half of the story. We also need to ensure we can provide good proactive advice to our beneficiaries, so they are well protected from malicious documents before they arrive at their hard drives. Hopefully, with all the content we reviewed, we can not only understand better the classic advice we give to end-users but also propose a couple of additional measures that could be useful for vulnerable actors with an increased risk level.\nThe first idea we want to reinforce is that telling activists, journalists, and media that they shouldn\u0026rsquo;t open files from unknown sources is not sustainable advice. To carry on their activities, many people in these categories need to open files sent to them that might contain threats, like press conference invitations, leaked documents, event agendas, etc. So, the most pertinent advice we can give them is to know the risks and to build processes to let them open the files in the safest way possible.\nThat said, some defensive measures against malicious documents include\nIn general Antivirus solutions Many malicious documents distributed are part of massive operations that are successfully documented and integrated into antivirus detection databases. Keep in mind that this recommendation doesn\u0026rsquo;t guarantee the detection of malicious files that are tailor-made for specific targets. Still, it will give a layer of security that is worth having, especially if operating with many untrusted files. Remember to choose a reputable vendor, activate real-time detection if available, and keep the database updated.\nKeep software legal and updated Every year there are hundreds of new vulnerabilities are discovered and disclosed for many everyday used programs, including Microsoft Office and PDF readers, and said vulnerabilities are \u0026ldquo;patched\u0026rdquo; through software updates. So, having all the software up to date will reduce drastically the chances of someone using well-known and documented vulnerabilities to attack a target and succeeding. Having pirated software will affect its ability to detect and apply software updates, making it a security problem. This is why having original software is advisable from a security perspective, even before addressing legal considerations.\nReview the file extension of suspicious files Some campaigns trick users into opening harmful files disguised as documents but are other kinds of files, like executable applications, .zip files, or other container file types such as .iso, etc. Usually, these files even include custom icons to look like MS Word documents, PDFs, etc. Checking carefully the files we download and open will give us another layer of protection by catching when a file doesn\u0026rsquo;t have a common or expected file type.\nUse \u0026ldquo;borrowed\u0026rdquo; readers A common strategy is to open suspicious documents in an environment away from your computer that is better equipped to detect and contain any potential threat. A classic example is to open files using Google Drive (this includes previews in Gmail); then, the file is actually opened in Google\u0026rsquo;s servers and rendered to our computers, making Google (or any other platform with similar capabilities) the actor that has to worry of specific threats contained in opened documents. A downside of this approach is that we lose some visibility and analysis capacity, given that we are not downloading the files, but it will be helpful for everyday use.\nUse specific tools designed for this use case There are tools that take the same principle of using a safe environment to open files but streamline the process for the user and then generate safe copies that only contain the visible elements (similar to printing the document and scanning the result into a final file). One of the tools is Dangerzone, a program that receives a suspicious file and generates a copy that is safe to open. The only notable downside is that the tool requires downloading dependencies of some Gbs of size, so if hard disk space and/or download speeds and stability are an issue, this tool can be more difficult to set up. Another tool for achieving this goal is Circ.lu\u0026rsquo;s CIRCLean USB sanitizer, which uses a separate computer (they propose a Raspberry Pi) and two USB drives. In the first drive, you save the suspicious versions of the files, and the software will generate the safe copies and save them on the second USB drive. The most notable challenges with this approach are using dedicated hardware to operate the files and adding extra physical steps to move files to and from USB drives.\nChecking file hashes in detection platforms Another common strategy when in front of suspicious files, is checking in platforms like VirusTotal if the file is known as malicious. This will help us save time in case the file is a known threat and will even give us more valuable information, like what kind of malware it tries to execute and messages from community members associated with the file. A very important observation is to know that uploading the file to tools like VirusTotal will put the file at the community disposition, disclosing the content of the document (that might have sensitive information), and potentially alerting the document creators if they are monitoring the specific file. A workaround for this is to not upload the file but checking it\u0026rsquo;s hash instead. In the first part of this series, there is guidance on how to check hashes.\nExample of searching for the hash of one file, August 2022\nExample of results in VirusTotal, August 2022\nSpecific to PDFs: Disable Javascript execution in reader (and other security settings) Depending on your PDF reader software, the execution of JavaScript code might be already disabled, however, it is advisable to double-check in case you expect to open suspicious files. Also, depending on your reader, there might be other security features that can be configured.\nExample for Acrobat Reader (August 2022, Menu Edit -\u0026gt; Preferences -\u0026gt; Javascript)\nExample for Foxit Reader (August 2022, Menu File-\u0026gt;Preferences-\u0026gt;Javascript)\nSpecific to office Minimize the use of macros in legitimate activities Even when there are many acceptable and harmless use cases for macros, using documents with them frequently and being used to allow them, might open the door to receiving a malicious document and enabling its macros accidentally, especially organizations should be mindful of this situation and plan accordingly or removing the use of macros, or preparing processes to live with them, considering how to handle untrusted files.\nDisable macros and check the Trust Center Microsoft Office recently changed its policy regarding macros multiple times, so depending on when you are reading this material, Office might have macros enabled or disabled by default; also, there might be rules depending on the origin of files, etc. One way of having more visibility and control is checking the Trust Center to see and configure directly the behavior towards macros.\nTrust Center for MS Office (August 2022, Menu File-\u0026gt;Options-\u0026gt;Trust Center-\u0026gt;Trust Center Settings-\u0026gt;Macro Settings)\nAnother interesting feature in MS Office is Protected View, which considering the origin of a file, opens it in a sandboxed environment with little privilege or access to interfere with the computer, offering another layer of trust. One problem with this mode is that, similar to macro blocking; there is a button in a ribbon above the document where the user can disable the Protected View feature, again enabling attacks where the document creator tricks the user to disable this protection.\nProtected View settings (August 2022, Menu File-\u0026gt;Options-\u0026gt;Trust Center-\u0026gt;Trust Center Settings-\u0026gt;Protected View)\nProtected View for a MS Word document (August 2022)\nWhat\u0026rsquo;s next First, when receiving a suspicious file, you will have the skills to run a first analysis to see any obvious security problems; the potential scenarios might be abstracted to these:\nIf the file doesn\u0026rsquo;t seem to contain anything harmful, we can lower the suspicion level of the file. If, by any chance, the target has a high-risk level, we might want to double-check with other colleagues or more specialized groups. If the file seems malicious, we might try to search on platforms like VirusTotal for its hash, and if it is a known malware sample, we will find a lot of more detailed information that will be useful for understanding the nature of the threat, how massive is the campaign, etc. If the threats contained in the file are easy to detect and understand, but not known by the community, we should be able to give some insight on the specifics when researching more or looking for help. If the elements contained in the file seem advanced, hard to understand, or even difficult to categorize as threats; and the file hash is unknown to public platforms, it is worth reaching out to more specialized organizations that can take a better look into the files in search of not-so-obvious threats. Also, we advise in general to:\nAvoid executing any suspicious code (unless you understand the risks and take the respective precautions, which are not covered in this material) Research more on any specific things you find and you don\u0026rsquo;t know about. There are a lot of different commands and ways to achieve things with code, and it is unsustainable to know all of them, so it is normal and expected to review documentation looking for specific instructions or features to understand better the functionality of a macro or other unknown objects. Keep in mind that analyzing malicious documents (and malware in general) is a full career that usually requires years of experience to handle more advanced cases. That said, we reinforce that this material is an introduction to a specific portion of malware analysis that hopefully will encourage the reader to learn more and gain more skills in this field. However, given the risk associated to operate malicious artifacts without proper processes and security considerations, we discourage the readers to add more processes and analysis tools to the presented workflows without proper knowledge of those processes and tools, especially those involving the execution of malware (or dynamic analysis).\nThis is a material in constant revision. For any questions or feedback, please reach out to me :)\n","date":"2023-01-04T00:00:00Z","image":"http://localhost:1313/p/analysis-of-malicious-documents-part-04-defensive-measures-next-steps-and-closure/1_hu47a86cfd803a9df7c9cd05ac2ffab0be_30367_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/analysis-of-malicious-documents-part-04-defensive-measures-next-steps-and-closure/","title":"Analysis of malicious documents – Part 04 – Defensive measures, next steps, and closure"},{"content":" This series was posted originally in the Greater Internet Freedom program website, this is a copy for archiving purposes\nAfter checking how to set up virtual machines as safe environments and presenting an introductory workflow to analyze suspicious PDF documents, we are ready to continue with Microsoft Office file formats.\nSecurity problems with Microsoft Office documents In general, office documents are not dangerous by themselves if they only contain the information for what they are designed for: pages with text and other printable elements for MS Word, cells with values and formulas for MS Excel, slides with observable elements in MS PowerPoint, etc.\nHowever, among the many features available in the MS Office ecosystem to add additional functionality to documents, one is specifically interesting from a digital security perspective: the possibility to embed objects in documents. The kind of objects we can embed are many, like math notation, multimedia, other documents, etc. And among all of them, there is one that is especially powerful because it allows the execution of custom code, which might be weaponized to harm the user: the macro.\nMacros The initial use case for macros In MS documents is to run repetitive tasks easily by \u0026ldquo;recording\u0026rdquo; them once and \u0026ldquo;playing\u0026rdquo; them repeatedly afterward. You can create macros without having any programming knowledge just by recording clicks on buttons and keyboard shortcuts, then MS Office will translate the recording into a series of commands that will be executed as a \u0026ldquo;little program\u0026rdquo; living inside our documents.\nWhen we start diving into how macros work, we start to see how they can be weaponized and why they are so popular in phishing attacks to infect computers vs. other techniques. First, the macros are stored as code written in the Visual Basic for Applications programming language (VBA), which is well documented, simple to write, and powerful. Visual Basic in general is also used for writing entire standalone programs, so it has the capacity to do things outside of the document scope, like downloading and executing files and altering system settings for instance. The associated commands for these tasks are mostly available in MS Office macros as well, so we can write macros that take advantage of the advanced commands available and use them to execute harmful tasks, like download and execute more advanced malware, delete files, etc.\nSecond, executing macros from documents is really easy. Document creators can configure them to run automatically when opening the file, when clicking a button, link, or any given element, among other triggers. Then for unknown files, MS Office will warn us that their macros might be dangerous and will block them, but we are usually one or two clicks away from disabling this protection and running the macros anyway. This situation makes it very attractive for malicious actors to use macros and convince us that they are safe to run through convincing arguments proper to each phishing campaign.\nComparing PDFs to MS Office documents with macros for malicious activities, MS Office docs offer more possibilities of commands to run on devices opening them, making them more powerful, and also more popular, than PDFs. Also, that flexibility is the reason we are focusing on weaponizing allowed macros inside malicious documents vs. other ways of weaponizing MS Office documents. If you are interested in different ways these files might be used to vulnerate users of outdated office versions, in the end, we are providing links to other references.\nOffice vulnerabilities\nThere are many documented ways used to exploit macros or office documents in general, however, many of the most creative ones are not possible to exploit in fully updated instances of ms office.\nAs any other program, MS Office might have known or unknown vulnerabilities that could allow to a device compromise, even without using macros.\nThe \u0026ldquo;old\u0026rdquo; and the \u0026ldquo;new\u0026rdquo; MS Office document formats Since 2003, Microsoft Office changed the way documents are created by default, including new file extensions, so new MS Word documents are stored with the \u0026ldquo;.docx\u0026rdquo; extension instead of \u0026ldquo;.doc\u0026rdquo; and so on. Even when the internal structure of these two file formats is different, macros are stored in a similar way, then the guidance provided in this material applies to both old and new file formats.\nIf you are interested in knowing more about the conventions to store macros and many other kinds of objects, you can research more about Object Linking and Embedding (or OLE), which is still used and adapted to new file formats, including MS Office documents\nAnalyzing MS Office documents To start exploring ways to detect when macros are included in MS Office documents, we\u0026rsquo;ll use oledump.py, a Python tool developed by Didier Stevens, the same author of the tools proposed previously in the previous part focused on PDFs. We\u0026rsquo;ll be also using a series of example files to show how MS Office documents work and how macros can be detected and reviewed, also from training materials from Didier Stevens.\nThe workflow to start the analysis of MS Office documents is very similar to the one we used on PDFs. First, we list the different elements present in the file, we identify interesting objects in terms of security, and then we try to get the actual content of those elements to see if there is anything harmful there.\nOledump.py The main use of this tool is to list any OLE objects included in any specific file, and show the content of any of them. The basic use of the tool is as follows:\n1 oledump.py ex001.doc Where ex001.doc is the name of the document we want to analyze\nHere we can see all the elements for a file without macros or other unusual objects embedded in an “old” MS Office filetype, doing the same experiment for a file with the “new” format (after MS Office 2003), we will get something like this.\nHere we can see that more elements in the .doc example are stored as OLE objects, while in the .docx example, we have a functional document without using OLE objects. This is because .docx documents are packaged as a .zip file with mostly .xml files inside (you can even try to change a safe .docx|.xlsx|.pptx file to the .zip extension and open it), and only use OLE-formatted data when needed.\nWhen we open a file with macros, the result will include new elements:\nIf we look closely at this example, we can see that the file that we passed to the command is a zip file, in this case, this is a .zip file containing a MS word document. Also, the .zip file is password-protected with the password “infected”. This is a common practice in the malware analysis community, and oledump.py considers it as a valid input and manages all the decompression, and passes the document for analysis automatically for us.\nIn this output, we see 2 objects that are different, and they are identified with the letter \u0026ldquo;m\u0026rdquo; or \u0026ldquo;M\u0026rdquo;. This means that those specific objects contain macros. Let\u0026rsquo;s use the -s command in oledump.py to see the content of those streams, starting with the object (or stream 8)\nWe used the command -s to select the object identified with the number 8, and the command -v to decompress the content because VBA might compress code by default, so it is a safe practice to include this command when requesting objects with macros.\nNow, looking at the content, we see some attribute declarations, these are done by default by VBA and they are not even visible to the document creator, then, this code is not considered custom or harmful to our effects. That said, code known to be harmless by the tool is identified with a lowercase \u0026ldquo;m\u0026rdquo;, assuming it as safe and less interesting for further analysis. Let\u0026rsquo;s analyze the other object containing a macro.\nTo give some context, this macro uses the MsgBox command that launches a dialog window with the message “Hello world” in this case. Also, AutoOpen() tells the program that this macro should be executed when opening the file automatically. In practice, an unknown document trying to execute an AutoOpen() macro will trigger a security alert, however, depending on the context, the user might be tricked into bypassing the warning and executing the macro anyway.\nTo explore the way this might be weaponized, let’s check the following file\nHere, the macro of interest is a little more complex than a dialog window with a text message, we can see that again, the AutoOpen() feature is used to execute the code below when opening the document. Looking at the code, with a little help checking the used commands, we can infer that the macro tries to download the content of an URL into a file in the temporal directory of our machine and execute whatever file was downloaded.\nIn this case, it seems that the file is filling a text file, which should be harmless, but with the right URL and the right filetype used to download the content, a macro like this one can write and execute programs or other harmful artifacts without much user interaction or even knowledge. Also, it is worth mentioning that this macro is a simplified version of more real threats, which usually obfuscate their code to avoid detection by antivirus software and can execute more elaborated actions, like adding the downloaded malware to startup programs or scheduled tasks, so the malware is persistent over time, among others.\nOften, analyzing more complex macros will require skills not covered in this material, like decrypting code and figuring out how, through the use of different commands and data structures, we can get the final executed code so we can understand what it does (de-obfuscation). A still very simple example showing a common technique to obfuscate content can be found checking the next file.\nHere, instead of using plain text, the creator of the macro used the encoding scheme base64, which makes more difficult to read the payload they are trying to execute. For this example, there are many tools that can help us decode that variable, one of them is CyberChef, a web application where we can input some data, and execute some operations to it to get an output, in this case we have:\nWith these examples and references, we should be able to know if a file has macros embedded using oledump.py, if a file is interesting to analyze further, and in case its code is simple enough, what the macro is trying to do. In the case of finding documents with very complex macros, the advice is to look for help to analyze the file more in-depth and never try to execute the file in our environments because it could have terrible effects on our devices in case they get infected.\nNow that we learned some introductory workflows to analyze PDFs and MS Office files, we are ready to review some defensive strategies to protect ourselves of malicious documents in the next and final part.\nChallenges Question: applying the same workflow to the file ex006.doc.zip we see this output, Which of the following hypothesis check out with the information we got so far?\n1. The file doesn’t have any macros Incorrect \u0026ndash; 2. The file has custom created macros as any of the other examples covered Incorrect \u0026ndash; 3. The file somehow has system harmless macros but not any custom created macros Correct \u0026ndash; Question: applying the same workflow to the file ex016.doc.zip we see a macro similar to the last one covered above, where the macro decodes something in base64. What is being passed to the Decode64 function? (hint: aaaaaaaaaaaaaa.aaaaaaa.aaaa)\nI want to see the answer ActiveDocument.Content.Text What\u0026rsquo;s next? After having a better idea of how PDF and MS Office can be assessed for malicious code, we can understand better how to propose defensive measures, and also, we can review final tips on how to conduct this kind of initial assessment.\nBonus: Further reading on MS Office security Oletools: another famous tool to analyze MS Office files List of known vulnerabilities of Microsoft Office (mostly not involving macros) CVE-2022-30190 or codename \u0026ldquo;Follina\u0026rdquo;: a recent trendy vulnerability abusing documents to interact with Windows troubleshooting features. \u0026ldquo;Uncompromised: Unpacking a malicious Excel macro\u0026rdquo;, an interesting case exploring a malicious file step by step. Analyzing Malicious Documents Cheat Sheet, Lenny Zeltser\u0026rsquo;s quick guidance to analyze suspicious documents. ","date":"2023-01-03T00:00:00Z","image":"http://localhost:1313/p/analysis-of-malicious-documents-part-03-microsoft-office-documents/11_hu26eed9cc7c1228930433ac93552fb2d8_79691_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/analysis-of-malicious-documents-part-03-microsoft-office-documents/","title":"Analysis of malicious documents – Part 03 – Microsoft Office documents"},{"content":" This series was posted originally in the Greater Internet Freedom program website, this is a copy for archiving purposes\nAfter the overview of virtual machine management and installation of Remnux as an environment to analyze suspicious artifacts, we will explore PDF files in terms of format and ways they can be used to harm users.\nWhat is a PDF? When we open a PDF file, we use specific software that render its content in a readable way, however, as many other file types, PDFs are built using a combination of regular plain text and binary data (for images and other elements that might require it), for instance, the following text renders the PDF file showed after:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 %PDF-1.4 1 0 obj \u0026lt;\u0026lt; /Length 51 \u0026gt;\u0026gt; stream 1 0 0 RG 5 w 36 144 m 180 144 l 180 36 l 36 36 l s endstream endobj 2 0 obj \u0026lt;\u0026lt; /Type /Catalog /Pages 3 0 R \u0026gt;\u0026gt; endobj 3 0 obj \u0026lt;\u0026lt; /Type /Pages /Kids [4 0 R ] /Count 1 \u0026gt;\u0026gt; endobj 4 0 obj \u0026lt;\u0026lt; /Type /Page /Parent 3 0 R /MediaBox [0 0 612 792] /Contents 1 0 R \u0026gt;\u0026gt; endobj xref 0 4 0000000000 65535 f 0000000010 00000 n 0000000113 00000 n 0000000165 00000 n 0000000227 00000 n trailer \u0026lt;\u0026lt; /Size 4 /Root 2 0 R \u0026gt;\u0026gt; startxref 344 %%EOF From \u0026ldquo;How to create a simple PDF file\u0026rdquo; from Callas Software\nFile structure From this example, we can see the standard structure of any PDF file:\nHeader: Containing the version of the protocol the file was built with, to instruct the reader program how to read the rest of the structure and render all its elements.\nBody: Here will be all the objects composing the PDF file, pages, images, text, fonts, etc. Even code and automated actions if the file has them.\nCross-reference table: Here we\u0026rsquo;ll find a list of all the objects of the document for easy access and their respective places inside the file. This is similar to a \u0026rsquo;table of contents\u0026rsquo; but for the PDF reader software to read. If at any given time the reader needs to render a specific object (for instance, if we scroll to a random page on a big document), the reader software will see what page should it render, and look it on this table to locate the respective elements in the body to load them on the screen.\nTrailer: Here we will find the place in the document of the cross-reference table and other useful information, like the number of objects in the cross-reference table (to check that the file is not corrupted for instance), the root object of the document, and encryption information if applicable. PDFs readers by design start reading the documents from the end, where they can find quickly where is the root object, and the cross-reference table to start rendering content.\nUnderstanding PDF objects Given the way PDFs are structured, the most interesting section to deep into is the body, because there we can found everything we can see and interact with (text, pages, images, forms, code, etc.). All of these elements are called objects, and there is a wide range of them according to the specifications, for instance, in the example above, the object\n1 2 3 4 5 6 7 8 4 0 obj \u0026lt;\u0026lt; /Type /Page /Parent 3 0 R /MediaBox [0 0 612 792] /Contents 1 0 R \u0026gt;\u0026gt; endobj is a page with the id 4, has a parent element with the id 3, and contains as child the element with id 1 (the red rectangle). Showing the exact way each object is written is outside of the scope of this material, however, there are some kinds of elements that might be used for malicious purposes, and we want to cover them a little more.\n/OpenAction: This object reference a set of actions to be executed when the PDF file is opened, this might be used to launch a website to support the content or for tracking purposes, execute JavaScript code, etc. This might be used to trick users into executing extra actions that can be harmful, or depending on the computer environment, this object can execute malware directly.\n/AA: This object also includes a series of actions that are triggered under varying circumstances, like visualizing a page, hovering the mouse pointer over specific objects, filling form fields, etc. The associated risks are similar to the /OpenAction object, but with many more trigger scenarios.\n/JS or /Javascript: Contains JavaScript code to be executed after an action is triggered, this code might include functions exclusive to PDFs.\n/Launch: Tries to launch an external application on the device after an action is triggered, this might be used, for instance, to open other documents or execute specific commands, which might be harmful.\n/EmbeddedFile: Allows the inclusion of arbitrary files, from documents to executables inside the PDF file. There are antecedents of benign PDF files containing other harmful files embedded, like malware executables or Microsoft Office documents with malicious macros.\n/ObjStm: Contains arbitrary information that will be processed according to the way it is called. The main use for this object is for grouping many objects and compressing them, resulting in a smaller file. However, this might be used as well to compress malicious code as a way to obfuscate it and avoid antivirus detection. Given the many different use cases for this type of object, assuming its presence as malicious will lead us to many false positives.\nIn more elaborated attacks, a combination of these objects can be used, for instance, a PDF file might trigger an action that opens a file that is embedded in the same file encrypted in a /ObjStm.\nConsidering all of this, we want to know if a file has any of these object types as a first step to see if a PDF file is malicious, or at least to make sure it is not.\nEnter pdfid Given that we know where to start looking for red flags on PDF files we might consider suspicious, we can start using the tool pdfid as the first step to see which object types are contained in our file. Pdfid is a part of a suite of tools developed by Didier Stevens to streamline some analysis processes on PDF files. These tools are executed using the command line, so they are known as CLI (Command Line Interface) applications. We\u0026rsquo;ll be explaining how to use them using the Remnux Virtual Machine we set up in the previous part of this course.\nTo use pdfid, we need to open a Terminal application in our virtual machine. When we start our VM this window should be already opened, however, we can always click the Activities menu in the top left corner, and then the Terminal icon in the left panel, as shown in the image,\nOnce in the Terminal window, we can start exploring the use of the pdfid command though its help, we only need to type\n1 pdfid.py -h -h is for \u0026ldquo;help\u0026rdquo;\nTip: we can always use the Tab key to autocomplete some commands\nHere we can see a number of options we can employ when using pdfid, this might look challenging for those new to using the terminal, however, we usually stick to a few of these options, and also with little practice, the process becomes faster and easier.\nTo analyze our first file, we need to keep present that the command we run in the command line is running “from a folder/directory”, so we need to know where are running the command from, and where is located the file we want to analyze. To give you some context, each time we open the Terminal application in Remnux, we are opening a terminal in the Home directory, the same location that we see when we open the Files application\nTo make things easier for now, we can put our PDFs in this folder, so the terminal command is executed from the same directory as our PDF file.\nWe can take our example file from above and save it as a pdf file with the help of a text editor on our host computer and drag and drop the file into the Remnux home directory.\nAnd with this, we can run the following command in our Terminal:\n1 pdfid.py test.pdf To receive this response:\nAs we can check, all the objects seen by pdfid match with the ones we know from the source of the PDF file, and none of them seems to be in the list of suspicious objects we described above.\nAs we stated before, there are techniques malicious actors employ to avoid easy detection of specific kinds of objects, pdfid tries to show even obfuscated objects, however, in some less common cases, there might be hidden objects that will require diving a little deeper to discover.\nEnter pdf-parser, example 1 Now, what happens when we find a pdf file with a suspicious object? Imagine we have a file ex005.pdf that gives us an output like this on pdfid:\nFrom here, and the guidance above of this resource, we know that there are 3 objects of the types /JS, /Javascript, and /OpenAction that could be interesting to review, especially because they suggest that the file is trying to execute some action when we open the file. Here, we can process it with pdf-parser to get which object type is each object and to see the content of said objects. For our example file, we will execute the following command:\n1 pdf-parser.py -a ex005.pdf We use the argument -a to see file\u0026rsquo;s stats, for a better reference we can always use pdf-parser.py --help to see a list of options on the screen.\nHere, we can see that indeed we have these three problematic objects, but also some additional information, we can see the id of the objects for each object type. Now we know that the /JS and /Javascript object(s) are living in the object with id 7, and the /OpenAction one is living in the object with id 1. Next, we can see the content of the /OpenAction object to see what the document is trying to do when opening it, for this, we use the command\n1 Pdf-parser.py -o 1 ex005.pdf Here the -o argument is used to give the tool the id of the object which content we want to see on the screen:\nHere, we can see the line “/OpenAction 7 0 R”, this means that the actual content of the /OpenAction object is living in the object with id 7, and when we open the file, we will call or reference said object. Repeating the process to see the content of the object with id 7 we get:\nWhere we can see that the document is trying to show an alert or pop-up with the message described in the terminal, if we open the file it will look like this:\nExample 2 As we mentioned before, there might be files in which suspicious content is not viewable in plain text, there might be a number of reasons to do this in legitimate cases, like compressing long pieces of information to reduce the size of the file among others, however, malicious files employ these techniques with obfuscation purposes to help avoid detection by antivirus software and other security solutions. For instance, if we repeat the previous workflow to the file ex006.pdf, we will see that the output for the pdfid command is the following:\nHere we can see in the /JavaScript line “1(1)”, this means that pdfid detected an object of this type, but obfuscated, repeating the same workflow we already know, we review the object with id 8 (where the JavaScript code resides) to see the following:\nHere we can’t see the actual code like in the last example, instead, we see among other things the line “/Filter /FlateDecode”. The /Filter option executes an operation on the final content of a stream to decode it, then /FlateDecode indicates the associated encoding that should be considered when decoding the content, to give a better sense of this, if we open the file with a text editor and search manually for this element we should see something like this:\nWhere the content inside the red square is the actual encoded content, for this case, pdf-parser can try to decode the actual content, for this we use the argument -f, so we end up using the command\n1 Pdf-parser.py -o 8 -f ex006.pdf Where we can see the actual content of the object to be rendered by the PDF reader.\nNow that we know the basics of how to review PDF files to look for suspicious objects, there are a couple of challenges for you.\nExample 3 Another thing PDF creator software does usually to build new files is to create objects inside streams that are encoded to make the resulting files smaller, this is desirable in general, but also creates a way to further obfuscate malicious code, analyzing the file example3.pdf we see some /ObjStm (Object Streams) that might contain (and they do indeed) other objects that might be interesting.\nFor this kind of scenarios, it is advisable to use the option -O (as in capital o) of pdf-parser, this option will try to parse any stream containing an object and treat them as regular objects of the file, for instance, using this option like this.\nReveal that the file has “new” objects and that one of them is an /AA, which is interesting to look for malicious behavior, looking at the respective object we have\nTelling us that the action is tied to a page object, in this case the /O is indicating that the action is triggered when we open the page, and the actual action is stored in the object 37, then\nAfter some research, we can conclude that this object tries to open the properties dialog of the pdf reader like this (nothing especially dangerous – example in a computer configured in Spanish)\nConclusion: try to use the -O parameter in case there are other objects hiding inside streams\nChallenges Question: analyzing the file challenge1.pdf (md5: 3b20821cb817e40e088d9583e8699938), what kind of interesting object is hiding behind a stream?\n1. OpenAction Incorrect \u0026ndash; 2. AA Correct \u0026ndash; 3. JS Incorrect \u0026ndash; 3. Javascript Incorrect \u0026ndash; Question: analyzing the file challenge2.pdf (md5: 30373b268d516845751c10dc2b579c97), we can see an action that tries to open an URL, what code the URL includes as a tracking code? (hint: 6 numbers)\nI want to see the answer 88965 What\u0026rsquo;s next Now that we know more about PDFs, lets cover in the next part another heavily weaponized kind of files: Office Documents.\n","date":"2023-01-02T00:00:00Z","image":"http://localhost:1313/p/analysis-of-malicious-documents-part-02-pdf-documents/13_hu240fb05a8481aa980793c3ec9617edae_85474_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/analysis-of-malicious-documents-part-02-pdf-documents/","title":"Analysis of malicious documents – Part 02 – PDF documents"},{"content":" This series was posted originally in the Greater Internet Freedom program website, this is a copy for archiving purposes\nIntro This (mini)course is aimed at those digital security enthusiasts and practitioners (technical support, facilitators, first responders, etc.) that want to learn more about malicious documents and how to identify them. These documents can be email attachments, files on flash drives, or downloads from specific websites. The main goals are:\nLearn the basics of how common document formats work and how they can be weaponized, with special emphasis on Portable Document Format files (PDF) and Microsoft Office documents (from at least MS Word, Excel, and PowerPoint). Introduce a few tools that might help identify signs of dangerous documents or confirm that they are safe to open. Provide some security advice and clarify common doubts about handling suspicious files. This course uses the format of short reads and quizzes in most of the covered content, where depending on the material, it will be necessary to run some tools. This will be covered in the section Working environment shortly after the introduction, the general requirements are:\nTo complete the proposed exercises: Capacity of running 1) a virtual machine in the computer using Virtualbox or similar software, or 2) python scripts (only to analyze the course files, not to analyze real samples). The time to cover the material (approximately 2 hours) This course takes materials available in other references, and only uses tools that are freely available. Most of the content is inspired by the work Didier Stevens has done over time, especially for SANS, as well as other references, a shortlist might be:\nhttps://blog.didierstevens.com/2011/05/25/malicious-pdf-analysis-workshop-screencasts/ https://github.com/filipi86/MalwareAnalysis-in-PDF https://www.sentinelone.com/blog/malicious-pdfs-revealing-techniques-behind-attacks/ https://www.youtube.com/watch?v=opdVFQEBCNU Structure Disclaimers Some threat modeling considerations For each kind of file format (PDFs, MS Office) How they are structured (in a more technical way) How they can be weaponized How we can do an introductory analysis Some conclusions/facts about the file format Some general advice against the related threats What\u0026rsquo;s next Up next, a series of useful disclaimers before starting with the material\nDisclaimers Given the nature of the task we will perform after mastering the content provided (analyzing malicious and dangerous files), and the complexity of the topic (that we see as an introduction to malware analysis), we strongly recommend reading this section and agree with all the items before moving forward.\nThis course is introductory: it is designed for people without previous experience in suspicious document analysis. In the Next steps section, we included a list of resources for further reading and reference. This course is not covering many advanced techniques: there are many specific threats whose complexity goes beyond the scope of this material, also, as in everything information security-related, there might be threats waiting to be discovered that won\u0026rsquo;t be covered in this course. We recommend looking for help in case we suspect we are seeing an advanced or unknown threat in a file or any other artifact, more of that in a later section. That said, this course will help us understand better how a benign file usually looks like, instead of how every malicious document is structured. Take your precautions when analyzing real files: the samples used in this course are harmless, that said, repeating the presented workflows in real samples without the respective security measured, most probably will result in your device being infected. Please don\u0026rsquo;t run any suspicious file in your main computer, use a virtual machine, a dedicated device, or an environment where you can\u0026rsquo;t execute the file on your machine but only analyze its properties. Disclaimer quiz Question 1: I understand the risks of analyzing suspicious files, the potential consequences of running malware on purpose or accidentally, I read the content of this page/section, and I understand the most common strategies to address these potential threats.\nQuestion 2: Which one of the following options describes best what we need to do when analyzing a real suspicious file?\n1. We should start a virtual machine (VM) or dedicated computer to analyze the file and give it as little access as possible to our host machine and the rest of the network\n2. We can analyze the file in our own computer/environment but without having access to the internet\n3. We should analyze the file in a computer or virtual machine (VM) with less common Operating Systems like Linux or macOS\nAbout threat models When looking for advice on how to deal with suspicious files, usually the proposed approach is to avoid any interaction with the files, for instance:\nDon\u0026rsquo;t open unknown files. Don\u0026rsquo;t interact with suspicious files. Don\u0026rsquo;t make eye contact with any suspicious file. Or, we can find another kind of advice that, while is enough for most people, could be misleading to sensitive users like Human Rights activists or journalists working in dangerous environments, or plainly counterproductive, for instance:\nUsing an Antivirus is enough to protect you from malicious files. Only Microsoft Office documents with macros are dangerous, so you can treat other kinds of files without worrying too much. Delete any email with suspicious attachments. This one is particularly concerning in some scenarios because if we delete the emails and attachments from our inbox, we lose key evidence that can help us assess if the artifacts are indeed malicious or targeted, which might be invaluable information. In practice, when we are working with targeted communities (especially journalists), not interacting with files is not an option. Many organizations, groups, and individuals need to open potentially dangerous files as part of their job, and they will do it even knowing the risks, some examples:\nJournalists receive a press conference invitation. Activists receive a support document as evidence in a human rights violation case or as a leak. An adversarial institution sends a document that should be reviewed and addressed. One extra factor to consider is that civil society actors are exposed to targeted threats unknown by Antivirus engines. Another one is that depending on the kind of attack; other file formats might be weaponized as well. These factors are essential to be considered by people helping vulnerable groups to better understand how documents and other common file formats might be weaponized, to give useful advice, but also to help them analyze specific files to understand and assess if they are being victims of targeted attacks.\nWith all of this in mind, we will be focusing on understanding how standard file formats are structured, how to spot the most common attacks using them, and some updated defensive measures to avoid being victims of this kind of threat.\nThreat model quiz Question 1: For a highly targeted organization receiving many Microsoft Office documents via email, which one of the following options is true? (Only one is correct)\n1. Even if the antivirus (AV) software says the file is safe, it might still contain malware.\n2. They need to delete any suspicious attachments immediately because it could be dangerous to have them in the inbox.\n3. They should not open any attachments from unknown sources.\nEnvironment: General considerations To execute most tasks on this course we\u0026rsquo;ll use basic tools written in the Python programming language, given the wide compatibility of Python with every Operating System, there are countless ways we can set up an environment, we propose one specifically but if you are familiar with Python, malware analysis, and/or virtualization you can set up a different version that works for you. The only strong ask would be to have an isolated environment to manipulate dangerous artifacts (files in this case), there are other considerations, but probably this is the most important one.\nIsolated environment and other good practices The samples used in this course are harmless, only to demonstrate how the files are structured and how to spot red flags, however, if you intend to analyze real files, chances are that you will find an infected one that could cause all kinds of problems, like infecting the computer you are using, compromising your information, or making your device unusable, among others. That said, is common practice to have an environment exclusively to analyze and run suspicious samples in a controlled way, so if anything goes wrong while manipulating the sample, you won\u0026rsquo;t affect your device or the information contained in it. Another advantage of having a dedicated environment is that after you manipulate malware samples, you can delete everything and start over without the fear of losing unrelated files. This allows us to plan practical ways to \u0026ldquo;reset\u0026rdquo; our environment to a ready-to-go state before each analysis.\nOne of the most used strategies to guarantee an isolated environment is using virtual machines (VMs), which basically emulate a complete computer inside another computer, including the Operating System (OS), hard drives, screen, etc. Common tools to set up and use VMs are Virtualbox and VMware Workstation Player, among others. Using dedicated hardware is also an option as long as it is secured in case of infection.\nOne potential disadvantage could be that some malware include code to check if they are executed in isolated environments and not run, making it more difficult to analyze it, however, the inherent danger of running malware in our everyday environments doesn\u0026rsquo;t worth even trying, we recommend looking for help, focusing on techniques that don\u0026rsquo;t rely on running the suspicious files, or getting information on how to set up an environment that looks like a real machine for a malware sample. For this resource, this shouldn\u0026rsquo;t be a problem since we won\u0026rsquo;t be executing any code from documents, but if you want to learn and conduct dynamic analysis on suspicious files, this will be useful.\nOther considerations Besides the good practice of having an isolated environment, other common practices are:\nMake sure the computer you are using is not connected to the internet or the local network: especially if you are opening suspicious files, the most frequent reason to do this is to avoid triggering signals that will alert malware operators that the code is being executed or tested according to other data like the IP address, or type of device executing the malware. Also, some malware will try to propagate to the local network, trying to infect other unintended devices, so it\u0026rsquo;s a common practice to isolate testing devices in different physical or virtual networks (or VLANs). Keep in mind that in case of analyzing a sample by executing it, it is possible that the malware detects it doesn\u0026rsquo;t have access to the Internet and not run. If you will connect to the internet, use a VPN or similar: the idea is to hide your real location in case the malware we are analyzing runs and signals their operators. Again, it is not usually recommended to execute malware without measures to avoid any potential communication with operators, however, using a VPN might be a good measure in case of accidental execution or if other configurations fail at some point. Arrange a process to reset your environment to a \u0026ldquo;clean\u0026rdquo; state: Depending on if you are using a Virtual Machine or dedicated hardware, there are some tools and features that are useful to reset the environment so every time you analyze a sample, the machine will be clean, for VMs using snapshots are a good example, and there is software to reverse a physical computer to a previous state. Stick to static analysis: In general, we can divide malware analysis depending on if we are executing the samples or not. Static analysis tries to dissect the files and other artifacts to gather as much insight as possible without executing them, while dynamic analysis executes the samples to see what changes in the testing environment. Depending on the kind of malware, one kind of analysis might be more useful than the other, but in general, dynamic analysis will require more measures to protect the testing environment and the network to be able to support the execution of real malware. This course only shows static analysis techniques. Be careful when publishing samples or other information of the analyzed samples: In general, this might alert malware operators about us analyzing the malware campaign, making them shut down the infrastructure, cleaning any traces to make attribution more difficult, etc. This applies to any public platform like social media, and websites, including some public platforms where we can send files to analyze them on the cloud looking for flags from Antivirus engines and the information security community. For the last scenario, we\u0026rsquo;ll share some examples and techniques to check the information we need without alerting anybody. Environment quiz Question 1: Which one of the following statements is true?\n1. Running samples will require fewer security measures than trying to dissect the artifacts to look for useful insight. Incorrect \u0026ndash; Executing malware will infect the environment we are using, causing things like notifying the creators, the malware trying to infect other devices in the network, and making the device unusable. All of these consequences require more security measures than analyzing the sample without executing it (known as Static Analysis) 2. Cutting access to the internet will make it harder for a malware sample to notify the creators that it has been executed. Correct – Without internet access, the malware won’t be able to communicate with external servers to execute certain actions, including notifying its execution. It is good to know as well that some malware use the internet to download other parts of its code, so cutting access might also be a problem because we won’t have insight into the entire functionality without obtaining the missing pieces. However, the risks associated with running accidentally the malware, make it better to be disconnected and see during the analysis if we are missing something important. 3. The most efficient way to analyze malware is using Virtual Machines because if the machine gets infected we can create them again from scratch. Incorrect – What makes VMs more efficient to use for malware analysis, is the ability to take “snapshots”, so we can take one capture of the state of a VM before we start the analysis, and when finished we can revert the VM to that snapshot, so we are ready to analyze the next sample in a controlled way. This is way faster than recreating the VM from scratch every time. (This was a tricky one to be honest) Environment example: Remnux + Virtualbox In case you want a functional environment ready to go, we recommend using Remnux, a downloadable virtual machine (VM) preconfigured with some useful tools for malware analysis. Here we will use Virtualbox to virtualize the Remnux machine, if you are familiar with this process, feel free to jump to the next section of the course.\nInstalling Virtualbox First, we will need a program to manage our virtual machines, we chose Virtualbox because is the most used solution that is compatible with the three main platforms (Windows, macOS, and Linux) and is free. To download the respective installer visit https://www.virtualbox.org/ and look for the big blue button. Then, look for the section with the packages by platform as shown in the image.\nHere, click on your platform, and follow the instructions. After that, you can run Virtualbox and see a window like this one\nYou won\u0026rsquo;t have anything yet in the blurred area, from here we are ready to download and install Remnux\nInstalling Remnux Now, you can go to https://remnux.org/ and click on \u0026ldquo;Download\u0026rdquo; In the corresponding section. It is possible that you get redirected to another page asking you to select if you want to download a General OVA or a Virtualbox OVA, in our case, the last will be the correct one.\nAfter downloading the file, it is recommended to check if the file was downloaded correctly, to do this, we need to check the associated hash of the file. Hashing is a dense topic we encourage to learn and apply (also it is very used in malware analysis), but for now, we can summarize it as a mathematical process that transform a piece of data (like a text, or a file), into an alphanumerical code, this code should be unique to the data you are analyzing, and even with small changes, the hash will change a lot, so checking that our downloaded file has the same hash published in the Remnux website, will tell us that the file was downloaded without issues, if the hash is different, it would be a sign that the file was corrupted because a faulty download process or somehow it is not the correct file (maybe an error on our side selecting the right version, or as a remote scenario, someone changed the file for a malicious version, so be alert). A quick reference on how to check hashes is available at https://technastic.com/check-md5-checksum-hash/\nAfter checking that our file was downloaded without issues, now we can import it into Virtualbox, in the Remnux page where we downloaded the VM, there are instructions available, however, it is enough with double-clicking the .ova file, and a wizard will guide us through the import process. We can leave everything as suggested in the proposed configuration. In the end, we should see the Remnux machine in our Virtualbox window. Clicking \u0026ldquo;Start\u0026rdquo; will turn on our machine in a separate window. This is a Linux machine, and to log in the user is remnux and the password malware (however, it is possible that the session will be open without prompting for credentials).\nExtra configurations on Virtualbox \u0026ndash; Network Given that we will be analyzing potentially harmful files, it is not advisable to run the machine in a way that can communicate with the rest of our network, the specific strategy might vary depending on the style of the analyst, however the configuration is done mostly in the interfaces screen of out VM. With our Remnux machine powered off, we click the button \u0026ldquo;Settings\u0026rdquo; in the toolbar.\nThen in the “Network” section, you will have a series of options, the most important are:\nEnable Network Adapter: disabling this will eliminate any connectivity between our VM and other devices through the network (Including ours, we will manage it using the graphic interface), it will emulate the absence of hardware to connect to any networks in the VM. Attached to \u0026ndash; NAT: The default configuration, will emulate a new network for the VM, this allows it to access the internet, but also other devices of our network, this is not recommended for the kind of use we will give our VM. Attached to \u0026ndash; Bridged Adapter: This will share the network adapter of our physical host computer to the VM, putting it like any other device on our network. This one is also not recommended for our use case. Attached to \u0026ndash; Host-only Adapter: this attaches the VM to a network that is only connected to only our host machine and other VMs with the same configuration, in some cases this might be useful, however, this can also expose our machine to malicious activity. Attached to \u0026ndash; Internal Network: similar to the last one but our host machine is not accessible, this is useful when we want to see how two or more machines interact with each other. Attached to \u0026ndash; Not attached: This emulates a network adapter without a cable connected to it Depending on the use we will give to our machine, for initial configuration we can keep NAT enabled to access the Internet to download tools, etc., and before starting our analysis, we can change it to Not attached, Internal Network, or disable the adapter.\nExtra configurations on Virtualbox \u0026ndash; Sharing information with the host machine It is very usual to share files and other data between our computer and the VM, again, there are different approaches we can adopt:Shared folders: similar to a network shared folder, we can synchronize one folder between our host and our guest system (the Virtual Machine). This is not always recommended to share malware samples because it will open a space in our computer that is controlled by our VM, which can be infected in moments of our analysis. To configure shared folders there is a dedicated section in the settings.\nShared clipboard and Drag and Drop: This will let us share the clipboard between our computer and the VM, this can be disabled, be unidirectional, or bidirectional as suggested in the image. Similar for dragging and dropping files between the host and the guest systems. For some, disabling sharing folders and enabling drag and drop only from \u0026ldquo;Host to Guest\u0026rdquo; is the most secure option to protect out physical computers, similar with the clipboard sharing, however, in some moments we might need to extract information from the VM. Extra configurations on Virtualbox \u0026ndash; Snapshots One very useful feature of Virtualbox, is to save a version of the VM we can revert to at any given point in the future, so for instance, if we configure the Remnux machine to analyze malware, we might want to save a Snapshot before starting the analysis, so when we are over, we can revert the VM to the saved snapshot to be sure the machine is not infected, and we are ready to continue analyzing.\nTo save a snapshot, with the machine in the desired state click \u0026ldquo;Machine\u0026rdquo;, then \u0026ldquo;Take Snapshot\u0026rdquo;\nThen select a name and click “OK”, it will take some time to build the snapshot and after that it will be available on the Snapshots section on the Virtualbox main screen for our VM.\nWe can use the “Restore” button on the respective screen\nWhat\u0026rsquo;s next Given that we can handle the basics with Virtualbox, we can learn about Remnux while understanding and analyzing our first file format: PDFs.\n","date":"2023-01-01T00:00:00Z","image":"http://localhost:1313/p/analysis-of-malicious-documents-part-01-introduction-and-vms/6_hu71091bd9fd3cc51e63e3804503417e43_60794_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/analysis-of-malicious-documents-part-01-introduction-and-vms/","title":"Analysis of malicious documents – Part 01 – Introduction and VMs"},{"content":"EN Publication: Article\nInvolvement: Contributor\nLink: https://safetag.org/2020/12/04/remote-audit-steps.html\n","date":"2020-12-04T00:00:00Z","image":"http://localhost:1313/p/how-to-implement-a-remote-safetag-audit-a-step-by-step-guide./RemoteSteps_hu3408f26e6dd47865ec6ead248711d63e_374452_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/how-to-implement-a-remote-safetag-audit-a-step-by-step-guide./","title":"How to implement a remote SAFETAG audit: A step by step guide."},{"content":"ES Tipo de publicacion: Video/Streaming\nVinculación: Presentador invitado (~min 48)\nEnlace: https://www.youtube.com/watch?v=_GbV8KFX59k\n","date":"2020-07-23T00:00:00Z","image":"http://localhost:1313/p/conexi%C3%B3n-segura-en-vivo-respondiendo-tus-preguntas-de-seguridad-y-censura-en-internet/conexion-segura-video_huaf93812b3c2c983503c18996e92a390c_328098_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/conexi%C3%B3n-segura-en-vivo-respondiendo-tus-preguntas-de-seguridad-y-censura-en-internet/","title":"Conexión Segura en VIVO: Respondiendo TUS preguntas de seguridad y censura en Internet"},{"content":"ES Tipo de publicacion: Video/Streaming\nVinculación: Presentador\nEnlace: https://www.youtube.com/watch?v=WI-a22eUdY4\n","date":"2020-07-06T00:00:00Z","image":"http://localhost:1313/p/evasi%C3%B3n-de-censura-y-anonimato-en-internet-carlos-guerra/wikimedia_hud7034d8bbd780ce2eb44f922e14c2f64_192360_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/evasi%C3%B3n-de-censura-y-anonimato-en-internet-carlos-guerra/","title":"Evasión de censura y anonimato en Internet - Carlos Guerra"},{"content":"ES Tipo de publicacion: Guía\nVinculación: Colaborador\nEnlace PDF: https://conexo.org/conceptos-y-herramientas-basicas-pdf - Versión en Portugués (PT) https://conexo.org/conceitos-e-ferramentas-basicas-pdf\nEnlace Versión HTML: https://conexo.org/conceptos-y-herramientas-basicas - Versión en Portugués (PT) https://conexo.org/conceitos-e-ferramentas-basicas\n","date":"2020-06-10T00:00:00Z","image":"http://localhost:1313/p/seguridad-digital-conceptos-y-herramientas-basicas/guia-conexo-2020_huc8cda594903dd6cf3e7b01edff18eb22_100037_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/seguridad-digital-conceptos-y-herramientas-basicas/","title":"Seguridad Digital: Conceptos y herramientas basicas"},{"content":"EN Publication: Research project\nInvolvement: Author - Technical Lead\nLink: https://fadeproject.org/\nES Tipo de publicacion: Proyecto de investigación\nVinculación: Autor - Encargado Técnico\nEnlace: https://fadeproject.org/?page_id=1402\u0026lang=es\n","date":"2020-05-31T00:00:00Z","image":"http://localhost:1313/p/fade-project-fade-antenna-detection-project/fade_hud64966d7dcc91f993f6a1e03dd8e8361_153165_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/fade-project-fade-antenna-detection-project/","title":"FADe Project: Fade Antenna Detection Project"},{"content":"ES Tipo de publicacion: Guía\nVinculación: Autor\nEnlace: https://www.derechosdigitales.org/wp-content/uploads/Recomendaciones-de-seguridad-en-Redes-caseras-de-cara-al-teletrabajo.pdf\n","date":"2020-03-01T00:00:00Z","image":"http://localhost:1313/p/recomendaciones-de-seguridad-en-redes-caseras-de-cara-al-teletrabajo/teletrabajo_hucf35d947bc2c151ab5c1b298f731de0d_241404_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/recomendaciones-de-seguridad-en-redes-caseras-de-cara-al-teletrabajo/","title":"Recomendaciones de seguridad en Redes caseras de cara al teletrabajo"},{"content":"ES Tipo de publicacion: Guía, Sitio web\nVinculación: Colaborador\nEnlace: https://derechosdigitales.org/microsd/\n","date":"2019-11-01T00:00:00Z","image":"http://localhost:1313/p/microsd/microsd_hu6baeff1700878493a08894418efc4f1f_198404_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/microsd/","title":"MicroSD"},{"content":"ES Tipo de publicacion: Guía\nVinculación: Autor\nEnlace: https://www.derechosdigitales.org/13931/manual-rapido-de-ooni-probe-para-monitorear-bloqueos-de-sitios-y-servicios-usando-telefonos-android/\n","date":"2019-10-21T00:00:00Z","image":"http://localhost:1313/p/manual-r%C3%A1pido-de-ooni-probe-para-monitorear-bloqueos-de-sitios-y-servicios-usando-tel%C3%A9fonos-android/ooni_huc92696ca86d6e549636ca3a76e091830_283931_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/manual-r%C3%A1pido-de-ooni-probe-para-monitorear-bloqueos-de-sitios-y-servicios-usando-tel%C3%A9fonos-android/","title":"Manual rápido de OONI Probe para monitorear bloqueos de sitios y servicios usando teléfonos Android"},{"content":"ES Tipo de publicacion: Artículo\nVinculación: Autor\nEnlace: https://www.derechosdigitales.org/13332/sobre-el-ataque-reportado-a-openpgp/\n","date":"2019-07-04T00:00:00Z","image":"http://localhost:1313/p/sobre-el-ataque-reportado-a-openpgp/openpgp_hu0d2306abe576903d8ab19f22d330952b_260114_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/sobre-el-ataque-reportado-a-openpgp/","title":"Sobre el ataque reportado a OpenPGP"},{"content":"ES Tipo de publicacion: Artículo\nVinculación: Autor\nEnlace: https://www.derechosdigitales.org/13250/dispositivos-y-sistemas-quien-tiene-el-control/\n","date":"2019-05-31T00:00:00Z","image":"http://localhost:1313/p/dispositivos-y-sistemas-qui%C3%A9n-tiene-el-control/huawei-usa_hu0aea241f8d66f38e2a0a4234b034b278_80318_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/dispositivos-y-sistemas-qui%C3%A9n-tiene-el-control/","title":"Dispositivos y sistemas: ¿Quién tiene el control?"},{"content":"ES Tipo de publicacion: Artículo\nVinculación: Colaborador\nEnlace: https://www.derechosdigitales.org/12841/\n","date":"2019-02-20T00:00:00Z","image":"http://localhost:1313/p/venezuela-cuando-el-atacante-es-el-gobierno/whatsapp_huc2ec8e14cb426ee852cfd93f1cf65cab_50629_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/venezuela-cuando-el-atacante-es-el-gobierno/","title":"Venezuela: Cuando el atacante es el gobierno"},{"content":"EN Publication: Research report\nInvolvement: Collaborator\nLink: https://vesinfiltro.com/noticias/Phishing_by_Venezuelan_government_targets_activists/\nES Tipo de publicacion: Informe de investigación\nVinculación: Colaborador\nEnlace: https://vesinfiltro.com/noticias/Phishing_impulsado_por_gobierno_de_Venezuela/\n","date":"2019-02-15T00:00:00Z","image":"http://localhost:1313/p/phishing-by-venezuelan-government-puts-activists-and-internet-users-at-risk.-phishing-impulsado-por-el-gobierno-de-venezuela-pone-en-riesgo-a-activistas-y-usuarios-de-internet./2019-02-15-report_huce85048bc2ca28dba4d54844f9f6be2f_138245_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/phishing-by-venezuelan-government-puts-activists-and-internet-users-at-risk.-phishing-impulsado-por-el-gobierno-de-venezuela-pone-en-riesgo-a-activistas-y-usuarios-de-internet./","title":"Phishing by Venezuelan government puts activists and internet users at risk. | Phishing impulsado por el gobierno de Venezuela pone en riesgo a activistas y usuarios de internet."},{"content":"ES Tipo de publicacion: Artículo\nVinculación: Autor\nEnlace: https://www.derechosdigitales.org/12791/venezuela-que-esta-pasando-con-los-bloqueos-en-internet/\n","date":"2019-01-24T00:00:00Z","image":"http://localhost:1313/p/","permalink":"http://localhost:1313/p/%23venezuela-qu%C3%A9-est%C3%A1-pasando-con-los-bloqueos-en-internet/","title":"#Venezuela: ¿Qué está pasando con los bloqueos en internet?"},{"content":"ES Tipo de publicacion: Guía\nVinculación: Autor\nEnlace: https://tor.derechosdigitales.org/torificate/\n","date":"2018-12-01T00:00:00Z","image":"http://localhost:1313/p/torificate/torificate_huefc43e9aecc57396ebf70e3a902351f6_87304_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/torificate/","title":"Torificate"},{"content":"EN Publication: Article\nInvolvement: Author\nLinks:\nhttps://safetag.org/2018/11/19/challenges-of-reporting.html https://safetag.org/2018/11/20/challenges-of-reporting-2.html ","date":"2018-11-20T00:00:00Z","image":"http://localhost:1313/p/the-challenges-of-reporting/safetag-reporting_hu6e2e9f3ef8cdd436cdabefad05f70144_102635_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/the-challenges-of-reporting/","title":"The challenges of reporting"},{"content":"EN Publication: Article\nInvolvement: Autor\nLink: https://medium.com/read-write-participate/my-year-being-a-ford-mozilla-open-web-fellow-5d88fd4cc5b9\n","date":"2018-08-27T00:00:00Z","image":"http://localhost:1313/p/my-year-being-a-ford-mozilla-open-web-fellow/owf1y_hu04e5a2bfcd2468a3671255265c2e5256_466707_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/my-year-being-a-ford-mozilla-open-web-fellow/","title":"My Year Being a Ford-Mozilla Open Web Fellow :)"},{"content":"ES Tipo de publicacion: Investigación\nVinculación: Colaborador\nEnlace: https://www.derechosdigitales.org/wp-content/uploads/Confiable-y-seguro.pdf\n","date":"2018-06-01T00:00:00Z","image":"http://localhost:1313/p/confiable-y-seguro/whatsapp_huc2ec8e14cb426ee852cfd93f1cf65cab_50629_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/confiable-y-seguro/","title":"¿Confiable y seguro?"},{"content":"EN Publication: Guide\nInvolvement: Author\nLink: https://sdamanual.org/\nES Tipo de publicacion: Guía\nVinculación: Autor\nEnlace: https://sdamanual.org/es/\n","date":"2018-05-01T00:00:00Z","image":"http://localhost:1313/p/sda-safe-and-documented-for-activism-sda-seguros-y-documentados-para-el-activismo/sda_hu5a8ad7f9d9c6297e9afdcb725f5bca37_30238_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/sda-safe-and-documented-for-activism-sda-seguros-y-documentados-para-el-activismo/","title":"SDA: Safe and documented for activism | SDA: Seguros y documentados para el activismo"},{"content":"EN Publication: Article\nInvolvement: Contributor\nLink: https://medium.com/read-write-participate/6-ways-being-a-mozilla-fellow-has-changed-my-life-eb14fcdf063b\n","date":"2018-03-26T00:00:00Z","image":"http://localhost:1313/p/6-ways-being-a-mozilla-fellow-has-changed-my-life/owf1y_hu04e5a2bfcd2468a3671255265c2e5256_466707_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/6-ways-being-a-mozilla-fellow-has-changed-my-life/","title":"6 Ways Being a Mozilla Fellow Has Changed My Life"},{"content":"EN Publication: Event session\nInvolvement: Presenter, Collaborator\nLink: https://internetfreedomfestival.org/wiki/index.php/Contextualizing_censorship_measurements_in_Venezuela\n","date":"2017-04-20T00:00:00Z","image":"http://localhost:1313/p/contextualizing-censorship-measurements-in-venezuela/owf1y_hu04e5a2bfcd2468a3671255265c2e5256_466707_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/contextualizing-censorship-measurements-in-venezuela/","title":"Contextualizing censorship measurements in Venezuela"},{"content":"EN Publication: Event session\nInvolvement: Presenter\nLink: https://internetfreedomfestival.org/wiki/index.php/Digital_security_guides_for_the_Latin_American_society\n","date":"2017-04-20T00:00:00Z","image":"http://localhost:1313/p/digital-security-guides-for-the-latin-american-society/owf1y_hu04e5a2bfcd2468a3671255265c2e5256_466707_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/digital-security-guides-for-the-latin-american-society/","title":"Digital security guides for the Latin American society"}]